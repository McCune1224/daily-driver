// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type GarminFileCategory string

const (
	GarminFileCategoryWorkout  GarminFileCategory = "workout"
	GarminFileCategoryActivity GarminFileCategory = "activity"
	GarminFileCategoryOther    GarminFileCategory = "other"
)

func (e *GarminFileCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GarminFileCategory(s)
	case string:
		*e = GarminFileCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for GarminFileCategory: %T", src)
	}
	return nil
}

type NullGarminFileCategory struct {
	GarminFileCategory GarminFileCategory
	Valid              bool // Valid is true if GarminFileCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGarminFileCategory) Scan(value interface{}) error {
	if value == nil {
		ns.GarminFileCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GarminFileCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGarminFileCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GarminFileCategory), nil
}

type GarminFitFile struct {
	ID           int32
	Filename     string
	Data         []byte
	UploadedAt   pgtype.Timestamptz
	FileCategory NullGarminFileCategory
}
