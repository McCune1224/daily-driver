// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getGarminFitFileByFilename = `-- name: GetGarminFitFileByFilename :one
SELECT id, filename, data, uploaded_at, user_id FROM garmin_fit_files
WHERE filename = $1
`

func (q *Queries) GetGarminFitFileByFilename(ctx context.Context, filename pgtype.Text) (GarminFitFile, error) {
	row := q.db.QueryRow(ctx, getGarminFitFileByFilename, filename)
	var i GarminFitFile
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.Data,
		&i.UploadedAt,
		&i.UserID,
	)
	return i, err
}

const getGarminFitFileByID = `-- name: GetGarminFitFileByID :one
SELECT id, filename, data, uploaded_at, user_id FROM garmin_fit_files
WHERE id = $1
`

func (q *Queries) GetGarminFitFileByID(ctx context.Context, id int32) (GarminFitFile, error) {
	row := q.db.QueryRow(ctx, getGarminFitFileByID, id)
	var i GarminFitFile
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.Data,
		&i.UploadedAt,
		&i.UserID,
	)
	return i, err
}

const listGarminFilenames = `-- name: ListGarminFilenames :many
SELECT filename FROM garmin_fit_files
ORDER BY uploaded_at DESC
`

func (q *Queries) ListGarminFilenames(ctx context.Context) ([]pgtype.Text, error) {
	rows, err := q.db.Query(ctx, listGarminFilenames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.Text
	for rows.Next() {
		var filename pgtype.Text
		if err := rows.Scan(&filename); err != nil {
			return nil, err
		}
		items = append(items, filename)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGarminFitFilesByDateRange = `-- name: ListGarminFitFilesByDateRange :many
SELECT id, filename, data, uploaded_at, user_id FROM garmin_fit_files
WHERE uploaded_at BETWEEN $1 AND $2
ORDER BY uploaded_at DESC
`

type ListGarminFitFilesByDateRangeParams struct {
	UploadedAt   pgtype.Timestamptz
	UploadedAt_2 pgtype.Timestamptz
}

func (q *Queries) ListGarminFitFilesByDateRange(ctx context.Context, arg ListGarminFitFilesByDateRangeParams) ([]GarminFitFile, error) {
	rows, err := q.db.Query(ctx, listGarminFitFilesByDateRange, arg.UploadedAt, arg.UploadedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GarminFitFile
	for rows.Next() {
		var i GarminFitFile
		if err := rows.Scan(
			&i.ID,
			&i.Filename,
			&i.Data,
			&i.UploadedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGarminFitFilesByUser = `-- name: ListGarminFitFilesByUser :many
SELECT id, filename, data, uploaded_at, user_id FROM garmin_fit_files
WHERE user_id = $1
ORDER BY uploaded_at DESC
`

func (q *Queries) ListGarminFitFilesByUser(ctx context.Context, userID pgtype.Int4) ([]GarminFitFile, error) {
	rows, err := q.db.Query(ctx, listGarminFitFilesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GarminFitFile
	for rows.Next() {
		var i GarminFitFile
		if err := rows.Scan(
			&i.ID,
			&i.Filename,
			&i.Data,
			&i.UploadedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchGarminFitFilesByFilename = `-- name: SearchGarminFitFilesByFilename :many
SELECT id, filename, data, uploaded_at, user_id FROM garmin_fit_files
WHERE filename ILIKE '%' || $1 || '%'
ORDER BY uploaded_at DESC
`

func (q *Queries) SearchGarminFitFilesByFilename(ctx context.Context, dollar_1 pgtype.Text) ([]GarminFitFile, error) {
	rows, err := q.db.Query(ctx, searchGarminFitFilesByFilename, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GarminFitFile
	for rows.Next() {
		var i GarminFitFile
		if err := rows.Scan(
			&i.ID,
			&i.Filename,
			&i.Data,
			&i.UploadedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
